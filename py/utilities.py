# Essentially copied from
#   https://github.com/epelofske65537/binary_tree_Batch_GCD
# but slightly modified so that it does not generate its own primes, but reads
# them from stdin so that they may be generated by a more efficient generator.
# 

import sys
import random

def read_primes_from_stdin():
    l = []
    for line in sys.stdin:
        if line[-1] == "\n":
            line = line[:-1]
        l.append(int(line, 16))
    return l

def generate_weak_keys(primes, TOTAL_MODULI, WEAK_MODULI, bitlength):
  random.seed(10)
  tracking = {}
  factors = []
  numb_primes_to_get = 2*TOTAL_MODULI - (2*WEAK_MODULI)
  for numb in range(0, numb_primes_to_get, 2):
    p = primes[numb]
    q = primes[numb+1]
    N = p*q
    tracking[N] = [p, q]
    factors.append(p)
    factors.append(q)
  numb += 2
  unique_shared_primes = []
  factors_for_weak_moduli = factors.copy()
  for weak in range(WEAK_MODULI):
    numb += 1
    p = random.choice(factors_for_weak_moduli)
    unique_shared_primes.append(p)
    factors_for_weak_moduli.remove(p)
    
    q = primes[numb]
    N = p*q
    tracking[N] = [p, q]
  assert len(unique_shared_primes) == len(list(set(unique_shared_primes)))
  return tracking, unique_shared_primes
